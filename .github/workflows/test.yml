# This is a basic workflow to help you get started with Actions

name: backend-develop

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "develop" branch1
  push:
    branches: [ "develop" ]
    paths: 
      - "src/**"
      - "Dockerfile"
      - "build.gradle"
      - ".gitignore"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
      # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4.5.0
        with:
          java-version: '21'
          distribution: 'corretto'
          
      # Runs a single command using the runners shell
      - name: Gradle gradlew setting
        run: chmod +x gradlew
        
      - name: Application Server Build
        run: ./gradlew clean build
        
      - name: Docker login (by kimhaechang)
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Docker Build
        run: |
          echo ${{ secrets.JASYPT_KEY }}
          echo ${{ vars.JASYPT_KEY }}
          echo ${{ vars.BACKEND_DOCKER_COMPOSE_PATH }}
          echo ${{ secrets.BACKEND_DOCKER_COMPOSE_PATH }}
          docker build --platform linux/arm64/v8 -t backend --build-arg JASYPT_KEY=${{ secrets.JASYPT_KEY }}  .
      
      # Runs a set of commands using the runners shell
      - name: Docker image push
        run: |
          docker tag backend ${{ secrets.DOCKER_USERNAME }}/tk-server
          docker push ${{ secrets.DOCKER_USERNAME }}/tk-server
  deploy:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: github_action
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker rm -f tkbus_backend_1 || true
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/tk-server
            docker-compose -f ${{ vars.BACKEND_DOCKER_COMPOSE_PATH }} up -d
      - name: Notify Discord - Deploy Success
        if: success()
        run: |
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            ASSIGNEES=$(echo "${{ github.event.pull_request.assignees }}" | jq -r 'map(.login) | join(", ")')
            BUILD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
            MESSAGE="배포가 성공했습니다! :white_check_mark:\nPR 제목:$PR_TITLE\nPR 링크:$PR_URL\nAssignee:$ASSIGNEE\n빌드 URL:$BUILD_URL"
  
            curl -X POST -H "Content-Type: application/json" -d '{"content": "'"$MESSAGE"'"}' ${{ secrets.DISCORD_WEBHOOK_URL }}
  
      - name: Notify Discord - Deploy Failure
        if: failure()
        run: |
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            ASSIGNEES=$(echo "${{ github.event.pull_request.assignees }}" | jq -r 'map(.login) | join(", ")')
            BUILD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
            MESSAGE="배포가 실패했습니다! :x:\nPR 제목:$PR_TITLE\nPR 링크:$PR_URL\nAssignee:$ASSIGNEES\n빌드 URL:$BUILD_URL"
  
            curl -X POST -H "Content-Type: application/json" -d '{"content": "'"$MESSAGE"'"}' ${{ secrets.DISCORD_WEBHOOK_URL }}
